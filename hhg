--!strict
-- AstraUI - A tiny, stylish Roblox UI library
-- Author: ChatGPT (GPT-5 Thinking)
-- License: MIT
-- Features: Floating launcher, window with snow effect, theme & glow, dropdown, slider, button, toggle, input
-- Mobile + PC friendly. No external assets required.

-- ========== Public API ==========
-- local AstraUI = require(path.to.AstraUI)
-- local win = AstraUI.createWindow({
--     title = "AstraUI Demo",
--     themeColor = Color3.fromRGB(255, 86, 146),
--     glow = true,
--     snow = true,
--     hotkey = Enum.KeyCode.RightShift, -- desktop toggle
--     floating = true,                   -- show floating launcher
-- })
-- local sec = win:AddSection("Controls")
-- sec:AddButton("Run", function() print("Clicked!") end)
-- sec:AddToggle("God Mode", false, function(on) print("Toggle:", on) end)
-- sec:AddSlider("WalkSpeed", 16, 100, 32, 1, function(v) print("Speed:", v) end)
-- sec:AddDropdown("Fruits", {"Apple","Banana","Cherry"}, "Apple", false, function(choice) print("Fruit:", choice) end)
-- sec:AddInput("Player Name", "Type here...", false, function(text) print("Hello,", text) end)
-- win:SetThemeColor(Color3.fromRGB(46, 170, 255))
-- win:SetGlow(true, Color3.fromRGB(46, 170, 255))
-- win:Open()

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")

type Section = {
    AddButton: (self: any, text: string, callback: () -> ()) -> any,
    AddToggle: (self: any, text: string, default: boolean, callback: (boolean) -> ()) -> any,
    AddSlider: (self: any, text: string, min: number, max: number, default: number, step: number?, callback: (number)->()) -> any,
    AddDropdown: (self: any, text: string, options: {string}, default: string | {string}?, multi: boolean?, callback: (any) -> ()) -> any,
    AddInput: (self: any, text: string, placeholder: string?, numeric: boolean?, callback: (string) -> ()) -> any,
}

export type Window = {
    AddSection: (self: any, title: string) -> Section,
    SetThemeColor: (self: any, color: Color3) -> (),
    SetGlow: (self: any, enabled: boolean, color: Color3?) -> (),
    Open: (self: any) -> (), Close: (self: any) -> (), Toggle: (self: any) -> (),
    Destroy: (self: any) -> (),
}

local AstraUI = {}
AstraUI.__index = AstraUI

local function makeRound(instance: Instance, radius: number?)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, radius or 12)
    c.Parent = instance :: any
end

local function addStroke(instance: Instance, thickness: number, color: Color3, transparency: number?)
    local s = Instance.new("UIStroke")
    s.Thickness = thickness
    s.Color = color
    s.Transparency = transparency or 0
    s.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    s.Parent = instance :: any
    return s
end

local function addPadding(instance: Instance, p: number)
    local ui = Instance.new("UIPadding")
    ui.PaddingTop = UDim.new(0, p)
    ui.PaddingBottom = UDim.new(0, p)
    ui.PaddingLeft = UDim.new(0, p)
    ui.PaddingRight = UDim.new(0, p)
    ui.Parent = instance :: any
    return ui
end

local function formatNumber(n: number)
    local s = tostring(math.floor(n * 100 + 0.5)/100)
    return s
end

local function makeShadow(parent: Instance)
    -- simple ambient shadow using an ImageLabel; avoids external asset by drawing with a gradient-filled frame
    local shadow = Instance.new("Frame")
    shadow.BackgroundColor3 = Color3.new(0,0,0)
    shadow.BackgroundTransparency = 0.6
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Position = UDim2.new(0, -10, 0, -10)
    shadow.ZIndex = 0
    makeRound(shadow, 20)
    shadow.Parent = parent
    return shadow
end

local function draggable(handle: GuiObject, root: GuiObject)
    local dragging = false
    local dragStart: Vector2
    local startPos: UDim2

    local function begin(input: InputObject)
        dragging = true
        dragStart = input.Position
        startPos = root.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end

    local function update(input: InputObject)
        if dragging then
            local delta = input.Position - dragStart
            root.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            begin(input)
        end
    end)
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            update(input)
        end
    end)
end

local function makeSnow(container: GuiObject)
    local running = true
    local connections = {}

    task.spawn(function()
        while running do
            -- Create a snowflake as a TextLabel "❄"
            local flake = Instance.new("TextLabel")
            flake.Text = "❄"
            flake.Font = Enum.Font.GothamBold
            flake.TextScaled = true
            flake.BackgroundTransparency = 1
            flake.Size = UDim2.fromOffset(math.random(8,16), math.random(8,16))
            flake.TextTransparency = math.random(0,2)/10
            flake.TextColor3 = Color3.fromRGB(245, 250, 255)
            flake.ZIndex = 50

            local width = container.AbsoluteSize.X
            local startX = math.random(0, math.max(1, width))
            flake.Position = UDim2.new(0, startX, 0, -20)
            flake.Parent = container

            local destY = container.AbsoluteSize.Y + 30
            local driftX = math.random(-60, 60)
            local t = TweenService:Create(flake, TweenInfo.new(math.random(5,10), Enum.EasingStyle.Linear), {
                Position = UDim2.new(0, startX + driftX, 0, destY),
                TextTransparency = 1
            })
            t:Play()
            task.delay(math.random(5,10), function() if flake then flake:Destroy() end end)

            task.wait(0.15)
        end
    end)

    return {
        Stop = function()
            running = false
            for _,con in ipairs(connections) do pcall(function() con:Disconnect() end) end
        end
    }
end

local function pulseGlow(stroked: UIStroke, color: Color3)
    local t1 = TweenService:Create(stroked, TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Color = color,
        Thickness = 2.5,
        Transparency = 0.25
    })
    t1:Play()
    return t1
end

-- Window + Components
local Window = {}
Window.__index = Window

function Window:AddSection(title: string): Section
    local section = Instance.new("Frame")
    section.Name = "Section"
    section.BackgroundTransparency = 0.15
    section.BackgroundColor3 = Color3.fromRGB(24,24,28)
    section.Size = UDim2.new(1, -12, 0, 44)
    section.AutomaticSize = Enum.AutomaticSize.Y
    section.ClipsDescendants = true
    section.ZIndex = 5
    makeRound(section, 12)
    addPadding(section, 10)
    section.Parent = self._content

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 18)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = title
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextColor3 = Color3.new(1,1,1)
    titleLabel.TextTransparency = 0.1
    titleLabel.Parent = section

    local list = Instance.new("UIListLayout")
    list.Padding = UDim.new(0, 8)
    list.SortOrder = Enum.SortOrder.LayoutOrder
    list.Parent = section

    local function mkRow(height: number): Frame
        local row = Instance.new("Frame")
        row.BackgroundTransparency = 1
        row.Size = UDim2.new(1, 0, 0, height)
        row.Parent = section
        return row
    end

    local themedColor = self._theme
    local glowEnabled = self._glowEnabled

    local api = {}

    function api:AddButton(text: string, callback: () -> ())
        local row = mkRow(32)
        local btn = Instance.new("TextButton")
        btn.Text = text
        btn.AutoButtonColor = true
        btn.BackgroundColor3 = Color3.fromRGB(35,35,42)
        btn.Size = UDim2.new(1, 0, 1, 0)
        btn.Font = Enum.Font.GothamSemibold
        btn.TextSize = 14
        btn.TextColor3 = Color3.new(1,1,1)
        btn.Parent = row
        makeRound(btn, 10)
        local st = addStroke(btn, 1.5, themedColor, 0.35)
        if glowEnabled then pulseGlow(st, themedColor) end
        btn.MouseButton1Click:Connect(function()
            if callback then
                task.spawn(callback)
            end
        end)
        table.insert(self._themed, st)
        return btn
    end

    function api:AddToggle(text: string, default: boolean, callback: (boolean) -> ())
        local row = mkRow(32)
        local label = Instance.new("TextLabel")
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(1, -64, 1, 0)
        label.Text = text
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.TextColor3 = Color3.new(1,1,1)
        label.Parent = row

        local toggle = Instance.new("TextButton")
        toggle.AnchorPoint = Vector2.new(1, 0.5)
        toggle.Position = UDim2.new(1, 0, 0.5, 0)
        toggle.Size = UDim2.new(0, 54, 0, 24)
        toggle.Text = ""
        toggle.BackgroundColor3 = Color3.fromRGB(36, 36, 42)
        toggle.Parent = row
        makeRound(toggle, 12)
        local st = addStroke(toggle, 1.5, themedColor, 0.35)
        table.insert(self._themed, st)

        local knob = Instance.new("Frame")
        knob.Size = UDim2.new(0, 20, 0, 20)
        knob.Position = UDim2.new(0, 2, 0.5, -10)
        knob.BackgroundColor3 = Color3.fromRGB(255,255,255)
        knob.Parent = toggle
        makeRound(knob, 10)

        local on = default or false
        local function apply(state: boolean)
            on = state
            TweenService:Create(knob, TweenInfo.new(0.18, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                Position = state and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10),
                BackgroundColor3 = state and themedColor or Color3.fromRGB(255,255,255)
            }):Play()
            TweenService:Create(toggle, TweenInfo.new(0.18), {
                BackgroundColor3 = state and Color3.fromRGB(46, 46, 56) or Color3.fromRGB(36,36,42)
            }):Play()
            if callback then task.spawn(callback, state) end
        end
        apply(on)
        toggle.MouseButton1Click:Connect(function() apply(not on) end)

        return {
            Set = function(_, v: boolean) apply(v) end,
            Get = function() return on end,
        }
    end

    function api:AddSlider(text: string, min: number, max: number, default: number, step: number?, callback: (number)->())
        step = step or 1
        local row = mkRow(40)

        local label = Instance.new("TextLabel")
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(1, 0, 0, 18)
        label.Text = string.format("%s  (%s–%s)", text, formatNumber(min), formatNumber(max))
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.TextColor3 = Color3.new(1,1,1)
        label.Parent = row

        local bar = Instance.new("Frame")
        bar.Size = UDim2.new(1, 0, 0, 8)
        bar.Position = UDim2.new(0, 0, 0, 22)
        bar.BackgroundColor3 = Color3.fromRGB(36,36,42)
        bar.Parent = row
        makeRound(bar, 6)
        local st = addStroke(bar, 1.5, themedColor, 0.35)
        table.insert(self._themed, st)

        local fill = Instance.new("Frame")
        fill.BackgroundColor3 = themedColor
        fill.Size = UDim2.new(0, 0, 1, 0)
        fill.Parent = bar
        makeRound(fill, 6)

        local handle = Instance.new("Frame")
        handle.Size = UDim2.new(0, 14, 0, 14)
        handle.BackgroundColor3 = Color3.fromRGB(255,255,255)
        handle.Position = UDim2.new(0, -7, 0.5, -7)
        handle.Parent = bar
        makeRound(handle, 7)

        local value = default
        local function setValue(v: number)
            v = math.clamp(math.floor(v/step + 0.5)*step, min, max)
            value = v
            local alpha = (v - min) / (max - min)
            fill.Size = UDim2.new(alpha, 0, 1, 0)
            handle.Position = UDim2.new(alpha, -7, 0.5, -7)
            if callback then task.spawn(callback, value) end
        end
        setValue(default)

        local dragging = false
        local function inputToValue(x: number)
            local abs = bar.AbsoluteSize.X
            local rel = math.clamp((x - bar.AbsolutePosition.X) / (abs > 0 and abs or 1), 0, 1)
            setValue(min + rel * (max - min))
        end

        bar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                inputToValue(input.Position.X)
            end
        end)
        bar.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                if dragging then inputToValue(input.Position.X) end
            end
        end)
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)

        return {
            Set = function(_, v: number) setValue(v) end,
            Get = function() return value end,
        }
    end

    function api:AddDropdown(text: string, options: {string}, default: string | {string}?, multi: boolean?, callback: (any)->())
        multi = multi or false

        local row = mkRow(34)
        local btn = Instance.new("TextButton")
        btn.BackgroundColor3 = Color3.fromRGB(35,35,42)
        btn.TextXAlignment = Enum.TextXAlignment.Left
        btn.AutoButtonColor = true
        btn.Size = UDim2.new(1, 0, 1, 0)
        btn.Text = text .. " ▼"
        btn.Font = Enum.Font.Gotham
        btn.TextSize = 14
        btn.TextColor3 = Color3.new(1,1,1)
        btn.Parent = row
        makeRound(btn, 10)
        local st = addStroke(btn, 1.5, themedColor, 0.35)
        table.insert(self._themed, st)
        if self._glowEnabled then pulseGlow(st, themedColor) end

        local listHolder = Instance.new("Frame")
        listHolder.Visible = false
        listHolder.BackgroundColor3 = Color3.fromRGB(28,28,34)
        listHolder.Size = UDim2.new(1, 0, 0, 0)
        listHolder.AutomaticSize = Enum.AutomaticSize.Y
        listHolder.Parent = row
        makeRound(listHolder, 10)
        addPadding(listHolder, 6)

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 6)
        layout.Parent = listHolder

        local selection: any = multi and {} or nil

        local function refreshLabel()
            if multi then
                local names = table.concat(selection, ", ")
                btn.Text = (#names > 0 and (text .. ": " .. names) or (text .. " ▼"))
            else
                btn.Text = (selection and (text .. ": " .. tostring(selection)) or (text .. " ▼"))
            end
        end

        local function addOption(opt: string)
            local o = Instance.new("TextButton")
            o.Text = opt
            o.BackgroundColor3 = Color3.fromRGB(36,36,42)
            o.TextColor3 = Color3.new(1,1,1)
            o.Font = Enum.Font.Gotham
            o.TextSize = 14
            o.Size = UDim2.new(1, 0, 0, 28)
            o.AutoButtonColor = true
            makeRound(o, 8)
            local st2 = addStroke(o, 1, themedColor, 0.5)
            table.insert(self._themed, st2)
            o.Parent = listHolder

            o.MouseButton1Click:Connect(function()
                if multi then
                    local found = table.find(selection, opt)
                    if found then table.remove(selection, found) else table.insert(selection, opt) end
                    refreshLabel()
                    if callback then task.spawn(callback, selection) end
                else
                    selection = opt
                    refreshLabel()
                    if callback then task.spawn(callback, selection) end
                    listHolder.Visible = false
                end
            end)
        end

        for _,opt in ipairs(options) do addOption(opt) end
        if default then
            if multi and type(default) == "table" then selection = default elseif not multi and type(default) ~= "table" then selection = default end
            refreshLabel()
        end

        btn.MouseButton1Click:Connect(function()
            listHolder.Visible = not listHolder.Visible
        end)

        return {
            Set = function(_, v: any) selection = v; refreshLabel() end,
            Get = function() return selection end
        }
    end

    function api:AddInput(text: string, placeholder: string?, numeric: boolean?, callback: (string)->())
        local row = mkRow(32)
        local box = Instance.new("TextBox")
        box.PlaceholderText = placeholder or ""
        box.Text = ""
        box.ClearTextOnFocus = false
        box.BackgroundColor3 = Color3.fromRGB(35,35,42)
        box.TextColor3 = Color3.new(1,1,1)
        box.Size = UDim2.new(1, 0, 1, 0)
        box.Font = Enum.Font.Gotham
        box.TextSize = 14
        box.TextXAlignment = Enum.TextXAlignment.Left
        box.Parent = row
        makeRound(box, 10)
        local st = addStroke(box, 1.5, themedColor, 0.35)
        table.insert(self._themed, st)
        if self._glowEnabled then pulseGlow(st, themedColor) end

        box.FocusLost:Connect(function()
            local txt = box.Text
            if numeric then
                local num = tonumber(txt)
                if not num then
                    box.Text = ""
                    return
                end
                if callback then task.spawn(callback, tostring(num)) end
            else
                if callback then task.spawn(callback, txt) end
            end
        end)
        return box
    end

    return setmetatable(api, {__index = self})
end

function Window:SetThemeColor(color: Color3)
    self._theme = color
    for _,obj in ipairs(self._themed) do
        pcall(function() (obj :: UIStroke).Color = color end)
    end
    if self._titleBar then
        pcall(function()
            (self._titleBar:FindFirstChild("Accent") :: Frame).BackgroundColor3 = color
        end)
    end
end

function Window:SetGlow(enabled: boolean, color: Color3?)
    self._glowEnabled = enabled
    local c = color or self._theme
    for _,obj in ipairs(self._themed) do
        if obj:IsA("UIStroke") then
            obj.Transparency = enabled and 0.25 or 0.5
            obj.Thickness = enabled and 2.5 or 1.5
            obj.Color = c
        end
    end
end

function Window:Open()
    if self._open then return end
    self._open = true
    self._root.Visible = true
    TweenService:Create(self._root, TweenInfo.new(0.22, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {GroupTransparency = 0}):Play()
    if self._snowController == nil and self._snowEnabled then
        self._snowController = makeSnow(self._root)
    end
end

function Window:Close()
    if not self._open then return end
    self._open = false
    local t = TweenService:Create(self._root, TweenInfo.new(0.18), {GroupTransparency = 1})
    t:Play()
    task.delay(0.2, function() self._root.Visible = false end)
end

function Window:Toggle()
    if self._open then self:Close() else self:Open() end
end

function Window:Destroy()
    if self._snowController then
        pcall(function() self._snowController.Stop() end)
    end
    if self._gui then self._gui:Destroy() end
end

function AstraUI.createWindow(config): Window
    config = config or {}
    local theme = config.themeColor or Color3.fromRGB(255, 86, 146)
    local glow = (config.glow == nil) and true or config.glow
    local snow = (config.snow == nil) and true or config.snow
    local floating = (config.floating == nil) and true or config.floating
    local title = config.title or "AstraUI"
    local hotkey = config.hotkey or Enum.KeyCode.RightShift

    -- ScreenGui
    local gui = Instance.new("ScreenGui")
    gui.Name = "AstraUI"
    gui.IgnoreGuiInset = true
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    gui.Parent = playerGui

    -- Floating launcher
    local launcher = Instance.new("TextButton")
    launcher.Name = "Launcher"
    launcher.Visible = floating
    launcher.AnchorPoint = Vector2.new(1, 0.5)
    launcher.Position = UDim2.new(1, -20, 0.5, 0)
    launcher.Size = UDim2.new(0, 56, 0, 56)
    launcher.Text = "◎"
    launcher.TextScaled = true
    launcher.BackgroundColor3 = Color3.fromRGB(24,24,28)
    launcher.TextColor3 = Color3.new(1,1,1)
    launcher.AutoButtonColor = true
    launcher.Parent = gui
    makeRound(launcher, 28)
    addStroke(launcher, 2, theme, 0.4)
    draggable(launcher, launcher)

    -- Window root uses CanvasGroup-style transparency via a Frame + UIGroup
    local root = Instance.new("Frame")
    root.Name = "Window"
    root.Visible = false
    root.AnchorPoint = Vector2.new(0.5, 0.5)
    root.Position = UDim2.new(0.5, 0, 0.5, 0)
    root.Size = UDim2.new(0, 460, 0, 420)
    root.BackgroundColor3 = Color3.fromRGB(18,18,22)
    root.Parent = gui
    makeRound(root, 18)
    addPadding(root, 10)
    makeShadow(root)

    -- Fake group transparency
    local group = Instance.new("UIGroup")
    group.GroupTransparency = 1
    group.Parent = root

    -- Title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Parent = root
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundTransparency = 1

    local accent = Instance.new("Frame")
    accent.Name = "Accent"
    accent.Size = UDim2.new(0, 6, 1, -6)
    accent.Position = UDim2.new(0, 6, 0, 3)
    accent.BackgroundColor3 = theme
    accent.Parent = titleBar
    makeRound(accent, 6)

    local titleLabel = Instance.new("TextLabel")
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 18
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextColor3 = Color3.new(1,1,1)
    titleLabel.Position = UDim2.new(0, 16, 0, 0)
    titleLabel.Size = UDim2.new(1, -80, 1, 0)
    titleLabel.Parent = titleBar

    local closeBtn = Instance.new("TextButton")
    closeBtn.Text = "✕"
    closeBtn.Size = UDim2.new(0, 32, 0, 28)
    closeBtn.Position = UDim2.new(1, -38, 0, 6)
    closeBtn.BackgroundColor3 = Color3.fromRGB(35,35,42)
    closeBtn.TextColor3 = Color3.new(1,1,1)
    closeBtn.AutoButtonColor = true
    closeBtn.Parent = titleBar
    makeRound(closeBtn, 8)
    addStroke(closeBtn, 1, theme, 0.5)

    draggable(titleBar, root)

    local content = Instance.new("Frame")
    content.Name = "Content"
    content.Parent = root
    content.Position = UDim2.new(0, 6, 0, 48)
    content.Size = UDim2.new(1, -12, 1, -54)
    content.BackgroundTransparency = 1

    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 10)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = content

    local api = setmetatable({
        _gui = gui,
        _root = group,
        _frame = root,
        _titleBar = titleBar,
        _content = content,
        _theme = theme,
        _glowEnabled = glow,
        _themed = {} :: {Instance},
        _snowEnabled = snow,
        _snowController = nil,
        _open = false,
    }, Window)

    -- connections
    launcher.MouseButton1Click:Connect(function() api:Toggle() end)
    closeBtn.MouseButton1Click:Connect(function() api:Close() end)

    -- Keyboard toggle (desktop)
    UserInputService.InputBegan:Connect(function(input, gp)
        if gp then return end
        if input.KeyCode == hotkey then api:Toggle() end
    end)

    return api
end

return AstraUI
