-- NOTHING UI LIBRARY (CreativeSquare Fork)
-- Author: ChatGPT (fork for square floating dock + open effects)
-- Goal: Keep public API compatible with original Nothing UI:
--   NothingLibrary.Notification().new({...})
--   local Window = NothingLibrary.new({...})
--   local Tab = Window:NewTab({...})
--   local Section = Tab:NewSection({...})
--   Section:NewToggle({...}), :NewButton({...}), :NewSlider({...}), :NewKeybind({...}), :NewDropdown({...})
--   InfoSection:NewTitle(text)
--   Window toggled by Keybind; new SQUARE floating dock with custom image.
--   Open animation improved; optional snow/rain effect on open.
--
-- This file is a self-contained module (drop-in single file).

local NothingLibrary = {}
NothingLibrary.__index = NothingLibrary

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- =============================
-- Utility
-- =============================
local function create(className, props, children)
    local obj = Instance.new(className)
    for k,v in pairs(props or {}) do
        obj[k] = v
    end
    for _,child in ipairs(children or {}) do
        child.Parent = obj
    end
    return obj
end

local function round(n, bracket)
    bracket = bracket or 1
    return math.floor(n/bracket + 0.5) * bracket
end

local function makeDraggable(handle, target)
    -- Simple drag, no selection capture
    local dragging = false
    local dragInput, mousePos, framePos

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            mousePos = input.Position
            framePos = target.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            target.Position = UDim2.new(
                framePos.X.Scale, framePos.X.Offset + delta.X,
                framePos.Y.Scale, framePos.Y.Offset + delta.Y
            )
        end
    end)
end

-- =============================
-- Notification API
-- =============================
local NotificationLib = {}
NotificationLib.__index = NotificationLib

function NothingLibrary.Notification()
    local self = setmetatable({}, NotificationLib)

    self.Gui = create("ScreenGui", {
        Name = "Nothing_Notifications",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        IgnoreGuiInset = true
    })

    self.Holder = create("Frame", {
        Name = "Holder",
        Parent = self.Gui,
        AnchorPoint = Vector2.new(1, 1),
        Position = UDim2.new(1, -20, 1, -20),
        Size = UDim2.new(0, 320, 1, -40),
        BackgroundTransparency = 1
    }, {
        create("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            HorizontalAlignment = Enum.HorizontalAlignment.Right,
            VerticalAlignment = Enum.VerticalAlignment.Bottom
        })
    })

    self.Gui.Parent = PlayerGui
    return self
end

function NotificationLib.new(self, cfg)
    cfg = cfg or {}
    local title = tostring(cfg.Title or "Notification")
    local desc = tostring(cfg.Description or "")
    local dur = tonumber(cfg.Duration or 4)
    local icon = cfg.Icon

    local card = create("Frame", {
        Name = "Card",
        Parent = self.Holder,
        Size = UDim2.new(0, 320, 0, 70),
        BackgroundColor3 = Color3.fromRGB(26,28,34),
        BorderSizePixel = 0,
        BackgroundTransparency = 0.05,
    }, {
        create("UICorner", {CornerRadius = UDim.new(0, 10)}),
        create("UIStroke", {Color = Color3.fromRGB(80,90,120), Transparency = 0.25, Thickness = 1}),
    })

    local iconLabel
    if icon then
        iconLabel = create("ImageLabel", {
            Name = "Icon",
            Parent = card,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 40, 0, 40),
            Position = UDim2.new(0, 12, 0, 15),
            Image = icon
        })
    end

    local titleLabel = create("TextLabel", {
        Name = "Title",
        Parent = card,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, icon and 60 or 12, 0, 10),
        Size = UDim2.new(1, icon and -72 or -24, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = title,
        TextSize = 16,
        TextColor3 = Color3.fromRGB(235,239,255),
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local descLabel = create("TextLabel", {
        Name = "Description",
        Parent = card,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, icon and 60 or 12, 0, 32),
        Size = UDim2.new(1, icon and -72 or -24, 0, 20),
        Font = Enum.Font.Gotham,
        Text = desc,
        TextSize = 14,
        TextColor3 = Color3.fromRGB(200,205,225),
        TextXAlignment = Enum.TextXAlignment.Left
    })

    card.BackgroundTransparency = 1
    card.Size = UDim2.new(0, 320, 0, 0)
    TweenService:Create(card, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        BackgroundTransparency = 0.05,
        Size = UDim2.new(0, 320, 0, 70)
    }):Play()

    task.delay(dur, function()
        if card and card.Parent then
            TweenService:Create(card, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
                BackgroundTransparency = 1,
                Size = UDim2.new(0, 320, 0, 0)
            }):Play()
            task.wait(0.22)
            card:Destroy()
        end
    end)
end

-- =============================
-- Main Window + API
-- =============================

-- Effect spawner (snow / rain) on open
local function spawnOpenEffect(root, effectCfg)
    effectCfg = effectCfg or {}
    local mode = effectCfg.Mode or "Snow" -- "Snow","Rain","None"
    if mode == "None" then return end

    local dur = effectCfg.Duration or 1.0
    local count = effectCfg.Count or 22
    local area = root.AbsoluteSize
    local holder = create("Frame", {
        Parent = root,
        BackgroundTransparency = 1,
        Size = UDim2.fromScale(1,1),
        ClipsDescendants = true,
        ZIndex = 1000
    })
    local function makeParticle()
        local isSnow = (mode=="Snow")
        local lbl = create("TextLabel", {
            Parent = holder,
            BackgroundTransparency = 1,
            Text = isSnow and "❄" or "•",
            Font = Enum.Font.GothamBold,
            TextSize = isSnow and math.random(12,18) or math.random(10,14),
            TextColor3 = isSnow and Color3.fromRGB(235,244,255) or Color3.fromRGB(170,200,255),
            Position = UDim2.new(0, math.random(-10, area.X + 10), 0, -20),
            Size = UDim2.new(0, 20, 0, 20),
            Rotation = isSnow and math.random(-15,15) or 0,
            ZIndex = 1001
        })
        local finishY = area.Y + 30
        local time = isSnow and math.random(80,110)/100 or math.random(45,65)/100
        local xOffset = isSnow and math.random(-30,30) or math.random(-5,5)
        TweenService:Create(lbl, TweenInfo.new(time, Enum.EasingStyle.Linear), {
            Position = UDim2.new(0, lbl.Position.X.Offset + xOffset, 0, finishY),
            TextTransparency = 0.2
        }):Play()
        task.delay(time, function()
            if lbl then lbl:Destroy() end
        end)
    end
    for i=1,count do
        task.delay(i*0.02, makeParticle)
    end
    task.delay(dur + 1.0, function()
        if holder then holder:Destroy() end
    end)
end

function NothingLibrary.new(cfg)
    cfg = cfg or {}
    local Keybind = cfg.Keybind or Enum.KeyCode.LeftControl
    local Logo = cfg.Logo -- window header icon
    local Title = cfg.Title or "Nothing UI"
    local Description = cfg.Description or "Library"
    local DockImage = cfg.DockImage or Logo  -- SQUARE floating dock image (customizable)
    local DockSide = cfg.DockSide or "Right" -- "Left" or "Right"
    local OpenEffect = cfg.OpenEffect or {Mode="Snow", Duration=1.0, Count=22}

    local self = setmetatable({}, {__index = NothingLibrary})

    -- ScreenGui
    self.Gui = create("ScreenGui", {
        Name = "Nothing_CreativeSquare",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        IgnoreGuiInset = true
    })
    self.Gui.Parent = PlayerGui

    -- SQUARE Floating Dock
    self.Dock = create("Frame", {
        Name = "Dock",
        Parent = self.Gui,
        Size = UDim2.new(0, 52, 0, 52),
        Position = (DockSide=="Left") and UDim2.new(0, 18, 0.5, -26) or UDim2.new(1, -70, 0.5, -26),
        BackgroundColor3 = Color3.fromRGB(24,26,32),
        BorderSizePixel = 0
    }, {
        -- square by design (no UICorner). Add subtle stroke:
        create("UIStroke", {Color = Color3.fromRGB(90,100,140), Transparency = 0.3, Thickness = 1}),
        create("ImageLabel", {
            Name = "Icon",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -12, 1, -12),
            Position = UDim2.new(0, 6, 0, 6),
            Image = DockImage or "rbxassetid://7733960981",
        })
    })
    self.Dock.Active = true
    makeDraggable(self.Dock, self.Dock)

    -- Main Window
    self.Main = create("Frame", {
        Name = "MainWindow",
        Parent = self.Gui,
        Size = UDim2.new(0, 720, 0, 420),
        Position = UDim2.new(0.5, -360, 0.5, -210),
        BackgroundColor3 = Color3.fromRGB(26,28,34),
        BorderSizePixel = 0,
        Visible = false
    }, {
        create("UICorner", {CornerRadius = UDim.new(0, 12)}),
        create("UIStroke", {Color = Color3.fromRGB(90,100,140), Transparency = 0.3, Thickness = 1}),
        create("Frame", { -- header
            Name = "Header",
            BackgroundColor3 = Color3.fromRGB(22,24,30),
            Size = UDim2.new(1, 0, 0, 54),
            BorderSizePixel = 0
        }, {
            create("UICorner", {CornerRadius = UDim.new(0, 12)}),
            create("ImageLabel", {
                Name = "Logo",
                BackgroundTransparency = 1,
                Size = UDim2.new(0, 32, 0, 32),
                Position = UDim2.new(0, 14, 0, 11),
                Image = Logo or "rbxassetid://7733960981"
            }),
            create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 54, 0, 7),
                Size = UDim2.new(1, -64, 0, 22),
                Font = Enum.Font.GothamBold,
                Text = tostring(Title),
                TextSize = 18,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextColor3 = Color3.fromRGB(235,239,255)
            }),
            create("TextLabel", {
                Name = "Desc",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 54, 0, 28),
                Size = UDim2.new(1, -64, 0, 18),
                Font = Enum.Font.Gotham,
                Text = tostring(Description),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextColor3 = Color3.fromRGB(200,205,225)
            })
        }),
        create("Frame", { -- tab bar
            Name = "TabBar",
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 160, 1, -54),
            Position = UDim2.new(0, 0, 0, 54)
        }, {
            create("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 6),
                VerticalAlignment = Enum.VerticalAlignment.Top
            })
        }),
        create("Frame", { -- content area
            Name = "Content",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -170, 1, -64),
            Position = UDim2.new(0, 170, 0, 64),
            ClipsDescendants = true
        })
    })
    makeDraggable(self.Main.Header, self.Main)

    -- Show/Hide animation
    self._open = false
    local function showWindow()
        if self._open then return end
        self._open = true
        self.Main.Visible = true
        self.Main.Size = UDim2.new(0, 720, 0, 380)
        self.Main.BackgroundTransparency = 1
        TweenService:Create(self.Main, TweenInfo.new(0.18, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            BackgroundTransparency = 0,
            Size = UDim2.new(0, 720, 0, 420)
        }):Play()
        spawnOpenEffect(self.Main, OpenEffect)
    end
    local function hideWindow()
        if not self._open then return end
        self._open = false
        TweenService:Create(self.Main, TweenInfo.new(0.16, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 720, 0, 380)
        }):Play()
        task.wait(0.17)
        self.Main.Visible = false
    end

    -- Dock click -> toggle
    self.Dock.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            if self._open then hideWindow() else showWindow() end
        end
    end)

    -- Keybind toggle
    UserInputService.InputBegan:Connect(function(input, gpe)
        if gpe then return end
        if input.KeyCode == Keybind then
            if self._open then hideWindow() else showWindow() end
        end
    end)

    -- Tab/Section registries
    self._tabs = {}
    self._firstTab = nil

    -- Tab creation method
    function self:NewTab(tabCfg)
        tabCfg = tabCfg or {}
        local tTitle = tostring(tabCfg.Title or "Tab")
        local tDesc  = tostring(tabCfg.Description or "")
        local tIcon  = tabCfg.Icon

        -- tab button in sidebar
        local btn = create("TextButton", {
            Name = "TabButton_" .. tTitle,
            Parent = self.Main.TabBar,
            Size = UDim2.new(1, -12, 0, 36),
            Position = UDim2.new(0, 6, 0, 0),
            BackgroundColor3 = Color3.fromRGB(28,30,38),
            AutoButtonColor = true,
            Text = "",
            BorderSizePixel = 0
        }, {
            create("UICorner", {CornerRadius = UDim.new(0, 8)}),
            create("UIStroke", {Color = Color3.fromRGB(90,100,140), Transparency = 0.4, Thickness = 1}),
            create("ImageLabel", {
                Name = "Icon",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 8, 0.5, -12),
                Size = UDim2.new(0, 24, 0, 24),
                Image = tIcon or "rbxassetid://7733960981"
            }),
            create("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 40, 0, 6),
                Size = UDim2.new(1, -48, 0, 24),
                Font = Enum.Font.GothamBold,
                Text = tTitle,
                TextSize = 15,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextColor3 = Color3.fromRGB(215,220,240)
            })
        })

        -- tab page
        local page = create("Frame", {
            Name = "TabPage_" .. tTitle,
            Parent = self.Main.Content,
            Size = UDim2.fromScale(1,1),
            BackgroundTransparency = 1,
            Visible = false
        })

        -- page layout -> two columns
        local left = create("ScrollingFrame", {
            Name = "Left",
            Parent = page,
            BackgroundTransparency = 1,
            Size = UDim2.new(0.5, -10, 1, 0),
            CanvasSize = UDim2.new(0,0,0,0),
            ScrollBarThickness = 4
        }, {
            create("UIListLayout", {
                Padding = UDim.new(0, 8),
                SortOrder = Enum.SortOrder.LayoutOrder
            })
        })
        local right = create("ScrollingFrame", {
            Name = "Right",
            Parent = page,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 10, 0, 0),
            Size = UDim2.new(0.5, -10, 1, 0),
            CanvasSize = UDim2.new(0,0,0,0),
            ScrollBarThickness = 4
        }, {
            create("UIListLayout", {
                Padding = UDim.new(0, 8),
                SortOrder = Enum.SortOrder.LayoutOrder
            })
        })

        local function showThisTab()
            for _,t in pairs(self._tabs) do
                t.page.Visible = false
            end
            page.Visible = true
            -- active visual
            for _,t in pairs(self._tabs) do
                TweenService:Create(t.btn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(28,30,38)}):Play()
            end
            TweenService:Create(btn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(36,38,46)}):Play()
        end

        btn.MouseButton1Click:Connect(showThisTab)

        local tabObj = {}
        tabObj.page = page
        tabObj.btn = btn

        function tabObj:NewSection(sCfg)
            sCfg = sCfg or {}
            local sTitle = tostring(sCfg.Title or "Section")
            local sIcon  = sCfg.Icon
            local pos    = sCfg.Position or "Left"
            local parent = (pos == "Right") and right or left

            local card = create("Frame", {
                Name = "Section_" .. sTitle,
                Parent = parent,
                BackgroundColor3 = Color3.fromRGB(30,32,40),
                Size = UDim2.new(1, -6, 0, 58),
                BorderSizePixel = 0
            }, {
                create("UICorner", {CornerRadius = UDim.new(0, 10)}),
                create("UIStroke", {Color = Color3.fromRGB(90,100,140), Transparency = 0.45, Thickness = 1}),
                create("Frame", { -- header
                    Name = "Header",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -16, 0, 36),
                    Position = UDim2.new(0, 8, 0, 6)
                }, {
                    create("ImageLabel", {
                        Name = "Icon",
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 22, 0, 22),
                        Position = UDim2.new(0, 4, 0, 6),
                        Image = sIcon or "rbxassetid://7733960981"
                    }),
                    create("TextLabel", {
                        Name = "Title",
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, -30, 1, 0),
                        Position = UDim2.new(0, 30, 0, 0),
                        Font = Enum.Font.GothamBold,
                        Text = sTitle,
                        TextSize = 15,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextColor3 = Color3.fromRGB(220,225,245)
                    })
                }),
                create("Frame", { -- body container
                    Name = "Body",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 8, 0, 44),
                    Size = UDim2.new(1, -16, 0, 8)
                }, {
                    create("UIListLayout", {
                        Padding = UDim.new(0, 8),
                        SortOrder = Enum.SortOrder.LayoutOrder
                    })
                })
            })

            local body = card.Body
            local function autoSize()
                local layout = body.UIListLayout
                local abs = 16 -- top + bottom padding
                for _,c in ipairs(body:GetChildren()) do
                    if c:IsA("Frame") or c:IsA("TextButton") then
                        abs = abs + c.AbsoluteSize.Y + 8
                    end
                end
                TweenService:Create(card, TweenInfo.new(0.08), {Size = UDim2.new(1, -6, 0, math.max(58, abs))}):Play()
                parent.CanvasSize = UDim2.new(0,0,0,parent.UIListLayout.AbsoluteContentSize.Y + 16)
            end

            body.ChildAdded:Connect(autoSize)
            body.ChildRemoved:Connect(autoSize)
            task.defer(autoSize)

            local sectionObj = {}

            function sectionObj:NewTitle(text)
                local lbl = create("TextLabel", {
                    Parent = body,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 22),
                    Font = Enum.Font.GothamBold,
                    Text = tostring(text or ""),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextColor3 = Color3.fromRGB(210,215,235)
                })
                autoSize()
                return lbl
            end

            function sectionObj:NewButton(cfgBtn)
                cfgBtn = cfgBtn or {}
                local title = tostring(cfgBtn.Title or "Button")
                local callback = cfgBtn.Callback or function() end

                local btn = create("TextButton", {
                    Parent = body,
                    BackgroundColor3 = Color3.fromRGB(40,42,50),
                    Size = UDim2.new(1, 0, 0, 32),
                    BorderSizePixel = 0,
                    Text = title,
                    Font = Enum.Font.GothamBold,
                    TextSize = 14,
                    TextColor3 = Color3.fromRGB(225,230,250)
                }, {
                    create("UICorner", {CornerRadius = UDim.new(0, 8)})
                })
                btn.MouseButton1Click:Connect(function()
                    task.spawn(function()
                        pcall(callback)
                    end)
                end)
                autoSize()
                return btn
            end

            function sectionObj:NewToggle(cfgT)
                cfgT = cfgT or {}
                local title = tostring(cfgT.Title or "Toggle")
                local state = (cfgT.Default == true)
                local callback = cfgT.Callback or function() end

                local row = create("Frame", {
                    Parent = body,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 32)
                }, {
                    create("TextLabel", {
                        Name = "Label",
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, -60, 1, 0),
                        Position = UDim2.new(0, 0, 0, 0),
                        Font = Enum.Font.Gotham,
                        Text = title,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextColor3 = Color3.fromRGB(215,220,240)
                    }),
                    create("TextButton", {
                        Name = "Switch",
                        BackgroundColor3 = state and Color3.fromRGB(80,170,255) or Color3.fromRGB(60,64,78),
                        Size = UDim2.new(0, 44, 0, 22),
                        Position = UDim2.new(1, -50, 0.5, -11),
                        BorderSizePixel = 0,
                        Text = ""
                    }, {
                        create("UICorner", {CornerRadius = UDim.new(1, 99)}),
                        create("Frame", {
                            Name = "Knob",
                            BackgroundColor3 = Color3.fromRGB(240,244,255),
                            Size = UDim2.new(0, 18, 0, 18),
                            Position = UDim2.new(state and 1 or 0, state and -20 or 2, 0.5, -9),
                            BorderSizePixel = 0
                        }, {
                            create("UICorner", {CornerRadius = UDim.new(1, 99)})
                        })
                    })
                })

                local switch = row.Switch
                local knob = switch.Knob

                local function setState(v, fromUser)
                    state = v and true or false
                    TweenService:Create(switch, TweenInfo.new(0.1), {BackgroundColor3 = state and Color3.fromRGB(80,170,255) or Color3.fromRGB(60,64,78)}):Play()
                    TweenService:Create(knob, TweenInfo.new(0.1), {
                        Position = UDim2.new(state and 1 or 0, state and -20 or 2, 0.5, -9)
                    }):Play()
                    if fromUser then
                        task.spawn(function()
                            pcall(callback, state)
                        end)
                    end
                end

                switch.MouseButton1Click:Connect(function()
                    setState(not state, true)
                end)

                autoSize()
                return {
                    Set = function(_, v) setState(v, false) end,
                    Get = function() return state end,
                }
            end

            function sectionObj:NewSlider(cfgS)
                cfgS = cfgS or {}
                local title = tostring(cfgS.Title or "Slider")
                local min = tonumber(cfgS.Min or 0)
                local max = tonumber(cfgS.Max or 100)
                local val = tonumber(cfgS.Default or min)
                val = math.clamp(val, min, max)
                local callback = cfgS.Callback or function() end

                local row = create("Frame", {
                    Parent = body,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 44)
                }, {
                    create("TextLabel", {
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 0, 18),
                        Position = UDim2.new(0, 0, 0, 0),
                        Font = Enum.Font.Gotham,
                        Text = string.format("%s: %s", title, tostring(val)),
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextColor3 = Color3.fromRGB(215,220,240),
                        Name = "Label"
                    }),
                    create("Frame", {
                        Name = "Bar",
                        BackgroundColor3 = Color3.fromRGB(50,54,70),
                        Size = UDim2.new(1, 0, 0, 10),
                        Position = UDim2.new(0, 0, 0, 26),
                        BorderSizePixel = 0
                    }, {
                        create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                        create("Frame", {
                            Name = "Fill",
                            BackgroundColor3 = Color3.fromRGB(80,170,255),
                            Size = UDim2.new((val-min)/(max-min), 0, 1, 0),
                            BorderSizePixel = 0
                        }, {
                            create("UICorner", {CornerRadius = UDim.new(0, 6)})
                        })
                    })
                })
                local label = row.Label
                local bar = row.Bar
                local fill = bar.Fill

                local function setValueFromX(x)
                    local rel = math.clamp((x - bar.AbsolutePosition.X)/bar.AbsoluteSize.X, 0, 1)
                    val = round(min + rel*(max-min), 1)
                    fill.Size = UDim2.new((val-min)/(max-min), 0, 1, 0)
                    label.Text = string.format("%s: %s", title, tostring(val))
                    task.spawn(function()
                        pcall(callback, val)
                    end)
                end

                bar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        setValueFromX(UserInputService:GetMouseLocation().X)
                    end
                end)
                bar.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                        setValueFromX(UserInputService:GetMouseLocation().X)
                    end
                end)

                autoSize()
                return {
                    Set = function(_, v)
                        v = math.clamp(tonumber(v) or min, min, max)
                        val = v
                        fill.Size = UDim2.new((val-min)/(max-min), 0, 1, 0)
                        label.Text = string.format("%s: %s", title, tostring(val))
                    end,
                    Get = function() return val end
                }
            end

            function sectionObj:NewKeybind(cfgK)
                cfgK = cfgK or {}
                local title = tostring(cfgK.Title or "Keybind")
                local key = cfgK.Default or Enum.KeyCode.RightAlt
                local callback = cfgK.Callback or function() end
                local waiting = false

                local row = create("TextButton", {
                    Parent = body,
                    BackgroundColor3 = Color3.fromRGB(40,42,50),
                    Size = UDim2.new(1, 0, 0, 32),
                    BorderSizePixel = 0,
                    Text = string.format("%s: %s", title, key.Name),
                    Font = Enum.Font.GothamBold,
                    TextSize = 14,
                    TextColor3 = Color3.fromRGB(225,230,250)
                }, {
                    create("UICorner", {CornerRadius = UDim.new(0, 8)})
                })

                row.MouseButton1Click:Connect(function()
                    if waiting then return end
                    waiting = true
                    row.Text = string.format("%s: ...", title)
                    local conn; conn = UserInputService.InputBegan:Connect(function(input, gpe)
                        if gpe then return end
                        if input.KeyCode ~= Enum.KeyCode.Unknown then
                            key = input.KeyCode
                            row.Text = string.format("%s: %s", title, key.Name)
                            waiting = false
                            conn:Disconnect()
                        end
                    end)
                end)

                UserInputService.InputBegan:Connect(function(input, gpe)
                    if gpe then return end
                    if input.KeyCode == key then
                        task.spawn(function() pcall(callback, key) end)
                    end
                end)

                autoSize()
                return {
                    Set = function(_, newKey)
                        key = newKey or key
                        row.Text = string.format("%s: %s", title, key.Name)
                    end,
                    Get = function() return key end
                }
            end

            function sectionObj:NewDropdown(cfgD)
                cfgD = cfgD or {}
                local title = tostring(cfgD.Title or "Dropdown")
                local data = cfgD.Data or {}
                local value = cfgD.Default
                local callback = cfgD.Callback or function() end

                local root = create("Frame", {
                    Parent = body,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 36)
                })
                local btn = create("TextButton", {
                    Parent = root,
                    BackgroundColor3 = Color3.fromRGB(40,42,50),
                    Size = UDim2.new(1, 0, 0, 32),
                    BorderSizePixel = 0,
                    Text = string.format("%s: %s", title, tostring(value or "")),
                    Font = Enum.Font.GothamBold,
                    TextSize = 14,
                    TextColor3 = Color3.fromRGB(225,230,250)
                }, { create("UICorner", {CornerRadius = UDim.new(0, 8)}) })

                local list = create("Frame", {
                    Parent = root,
                    BackgroundColor3 = Color3.fromRGB(32,34,42),
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 0, 36),
                    BorderSizePixel = 0,
                    Visible = false
                }, {
                    create("UICorner", {CornerRadius = UDim.new(0, 8)}),
                    create("UIStroke", {Color = Color3.fromRGB(90,100,140), Transparency = 0.5, Thickness = 1}),
                    create("UIListLayout", {Padding = UDim.new(0,4), SortOrder = Enum.SortOrder.LayoutOrder})
                })

                local function rebuild()
                    for _,c in ipairs(list:GetChildren()) do
                        if c:IsA("TextButton") then c:Destroy() end
                    end
                    for _,item in ipairs(data) do
                        local opt = create("TextButton", {
                            Parent = list,
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, -8, 0, 28),
                            Position = UDim2.new(0, 4, 0, 0),
                            Text = tostring(item),
                            Font = Enum.Font.Gotham,
                            TextSize = 14,
                            TextColor3 = Color3.fromRGB(215,220,240)
                        })
                        opt.MouseButton1Click:Connect(function()
                            value = item
                            btn.Text = string.format("%s: %s", title, tostring(value))
                            TweenService:Create(list, TweenInfo.new(0.12), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                            task.delay(0.13, function() list.Visible = false end)
                            task.spawn(function() pcall(callback, value) end)
                        end)
                    end
                    list.Size = UDim2.new(1, 0, 0, math.min(#data*30 + 6, 200))
                end
                rebuild()

                btn.MouseButton1Click:Connect(function()
                    local isOpen = list.Visible
                    if not isOpen then
                        list.Visible = true
                        TweenService:Create(list, TweenInfo.new(0.12), {Size = UDim2.new(1, 0, 0, math.min(#data*30 + 6, 200))}):Play()
                    else
                        TweenService:Create(list, TweenInfo.new(0.12), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                        task.delay(0.13, function() list.Visible = false end)
                    end
                end)

                autoSize()
                return {
                    Set = function(_, v) value = v; btn.Text = string.format("%s: %s", title, tostring(value)) end,
                    Get = function() return value end,
                    SetData = function(_, arr) data = arr or {}; rebuild() end
                }
            end

            return sectionObj
        end

        table.insert(self._tabs, {btn=btn, page=page})
        if not self._firstTab then
            self._firstTab = tabObj
            page.Visible = true
            TweenService:Create(btn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(36,38,46)}):Play()
        end
        return tabObj
    end

    -- Public helpers
    function self:Show() self._open = false; self.Main.Visible=false; self.Dock.Visible=true; self.Main.BackgroundTransparency=1; self.Main.Size = UDim2.new(0,720,0,380); task.defer(function() self._open=true self.Main.Visible=true TweenService:Create(self.Main, TweenInfo.new(0.18, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{BackgroundTransparency=0,Size=UDim2.new(0,720,0,420)}):Play() spawnOpenEffect(self.Main, OpenEffect) end) end
    function self:Hide() self._open = true; TweenService:Create(self.Main, TweenInfo.new(0.16, Enum.EasingStyle.Quad, Enum.EasingDirection.In),{BackgroundTransparency=1,Size=UDim2.new(0,720,0,380)}):Play(); task.delay(0.17,function() self._open=false self.Main.Visible=false end) end
    function self:Destroy() if self.Gui then self.Gui:Destroy() end end

    return self
end

return NothingLibrary
